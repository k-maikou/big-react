(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('scheduler')) :
	typeof define === 'function' && define.amd ? define(['react', 'scheduler'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory(global.React, global.scheduler));
})(this, (function (React, scheduler) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const createUpdate = (action, lane) => {
	    return {
	        action,
	        lane,
	        next: null
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	// 往updateQueue增加update
	const enqueueUpdate = (updateQueue, update) => {
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        update.next = update;
	    }
	    else {
	        update.next = pending.next;
	        pending.next = update;
	    }
	    updateQueue.shared.pending = update;
	};
	// 调用updateQueue
	const processUpdateQueue = (baseState, pendingUpdate, renderLane) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const first = pendingUpdate.next;
	        let pending = pendingUpdate.next;
	        do {
	            const updateLane = pending.lane;
	            if (updateLane === renderLane) {
	                const action = pending.action;
	                if (action instanceof Function) {
	                    // baseState 1 update (x) => 4x -> memoizedState = 4
	                    baseState = action(baseState);
	                }
	                else {
	                    // baseState 1 update 2 -> memoizedState = 2
	                    baseState = action;
	                }
	            }
	            else {
	                {
	                    console.error('不应该进入updateLane !== renderLane这个逻辑');
	                }
	            }
	            pending = pending.next;
	        } while (pending !== first);
	    }
	    result.memoizedState = baseState;
	    return result;
	};

	// 方法组件的节点
	const FunctionComponent = 0;
	// 根节点，比如说React.render包裹的那个节点
	const HostRoot = 3;
	// Dom节点
	const HostComponent = 5;
	// Dom文本
	const HostText = 6;
	// Fragment
	const Fragment = 7;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const Deletion = 0b0000100;
	const PassiveEffect = 0b0001000;
	const MutationMask = Placement | Update | Deletion;
	const PassiveMask = PassiveEffect | Deletion;

	// 判断当前数组环境是否支持Symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	const SyncLane = 0b0001;
	const NoLane = 0b0000;
	const NoLanes = 0b0000;
	function mergeLanes(laneA, laneB) {
	    return laneA | laneB;
	}
	function requestUpdateLanes() {
	    return SyncLane;
	}
	function getHighestPriorityLane(lanes) {
	    return lanes & -lanes;
	}
	function markRootFinished(root, lane) {
	    root.pendingLanes &= ~lane;
	}

	// fiber节点
	class FiberNode {
	    tag;
	    type;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key || null;
	        this.stateNode = null; // 对应的dom节点
	        this.type = null; // fiberNode的类型
	        // 构成树状结构
	        this.return = null; // 指向父节点
	        this.sibling = null; // 指向兄弟节点
	        this.child = null; // 指向子节点
	        this.index = 0; // 如果同级的fiber有好几个，index指向对应下标
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 表示刚开始工作的时候保存的props
	        this.memoizedProps = null; // 工作完后确认的props
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null; // 指向该fiber在另一次更新时对应的fiber
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	// 根节点下面的root节点
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    pendingLanes;
	    finishedLane;
	    pendingPassiveEffects;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        this.finishedWork = null;
	        hostRootFiber.stateNode = this;
	        this.pendingLanes = NoLanes;
	        this.finishedLane = NoLane; // 本次更新的lane
	        this.pendingPassiveEffects = {
	            unmount: [],
	            update: []
	        };
	    }
	}
	// 基于current创建一颗workInProgress树
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	// 根据element创建fiber
	function createFiberFormElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // 比如说'div'也是一种div的string类型
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}
	function createFiberFormFragment(elements, key) {
	    const fiber = new FiberNode(Fragment, elements, key);
	    return fiber;
	}

	function ChildReconciler(shouldTrackEffects) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        // 标记节点为删除
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= Deletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            // 标记所有的兄弟节点为删除
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const { key, type, $$typeof } = element;
	        // 比较element和current是否可以复用
	        while (currentFiber !== null) {
	            // update
	            if (key === currentFiber.key) {
	                // key相同，比较type
	                if ($$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === type) {
	                        let props = element.props;
	                        if (element.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        // key相同且type也相同，用useFiber复用节点
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = returnFiber;
	                        // 如 A1B2C3D4 -> A1，复用完A1节点后，其它节点需要标记删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    // key相同但type不同，没法复用。后面的兄弟节点也没有复用的可能性了，都删除
	                    deleteChild(returnFiber, currentFiber);
	                    break;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // key不同，删掉当前不同的child，然后遍历兄弟节点
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        // 都不能复用，根据element创建fiber
	        let fiber;
	        // 判断是element类型还是fragment类型
	        if (element.type === REACT_FRAGMENT_TYPE) {
	            fiber = createFiberFormFragment(element.props.children, key);
	        }
	        else {
	            fiber = createFiberFormElement(element);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            // update type相同可以复用
	            if (currentFiber.tag === HostText) {
	                // 类型不变，可以复用节点
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                // 把其他的兄弟节点标记为删除
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            // 无法复原则先删除，后新建
	            deleteChild(returnFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        // 都不能复用，创建新的fiber节点
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 边界处理，在mount时根节点插入Placement
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    function reconcileChildrenArray(returnFiber, currentFirstChild, newChild) {
	        // 最后一个可复用fiber在current中的index
	        let lastPlacedIndex = 0;
	        // 创建的最后一个fiber
	        let lastNewFiber = null;
	        // 创建的第一个fiber
	        let firstNewFiber = null;
	        // 1. 将current保存到map中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            // 如果当前节点没有key 使用他的index做为key
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let i = 0; i < newChild.length; i++) {
	            // 2. 遍历newChild，寻找是否可复用
	            const after = newChild[i];
	            const newFiber = updateFormMap(returnFiber, existingChildren, i, after);
	            if (newFiber === null) {
	                continue;
	            }
	            // 3. 标记移动还是插入
	            newFiber.index = i;
	            newFiber.return = returnFiber;
	            if (lastNewFiber === null) {
	                lastNewFiber = newFiber;
	                firstNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffects) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    // 如果lastPlacedIndex大于oldIndex，标记当前fiber为移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    // 如果oldIndex大雨LastPlacedIndex，则不标记移动，更新lastPlacedIndex
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                // mount时直接标记插入
	                newFiber.flags |= Placement;
	            }
	        }
	        // 4. 将map中剩下的标记为删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return firstNewFiber;
	    }
	    function updateFormMap(returnFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index;
	        const before = existingChildren.get(keyToUse);
	        // HostText类型
	        if (typeof element === 'string' || typeof element === 'number') {
	            if (before) {
	                // 判断之前的fiber节点是不是HostText
	                if (before.tag === HostText) {
	                    // 如果是，则把之前的key删掉
	                    existingChildren.delete(keyToUse);
	                    // 然后直接复用这个节点
	                    return useFiber(before, { content: element + '' });
	                }
	            }
	            // 不能复用则创建新的fiber节点
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        // ReactElement类型
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type === REACT_FRAGMENT_TYPE) {
	                        return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	                    }
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFormElement(element);
	            }
	            // TODO 数组类型
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型的child');
	            }
	        }
	        if (Array.isArray(element)) {
	            return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    return function reconcileChildrenFiber(returnFiber, currentFiber, newChild) {
	        // 判断Fragment
	        const isUnKeyedTopLevelFragment = typeof newChild === 'object' &&
	            newChild !== null &&
	            newChild.type === REACT_FRAGMENT_TYPE &&
	            newChild.key === null;
	        if (isUnKeyedTopLevelFragment) {
	            newChild = newChild.props.children;
	        }
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            // 多节点的情况
	            if (Array.isArray(newChild)) {
	                return reconcileChildrenArray(returnFiber, currentFiber, newChild);
	            }
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('为实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // HostText文本类型
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (currentFiber !== null) {
	            // 兜底删除
	            deleteRemainingChildren(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	function updateFragment$1(returnFiber, current, elements, key, existingChildren) {
	    let fiber;
	    if (!current || current.tag !== Fragment) {
	        fiber = createFiberFormFragment(elements, key);
	    }
	    else {
	        existingChildren.delete(key);
	        fiber = useFiber(current, elements);
	    }
	    fiber.return = returnFiber;
	    return fiber;
	}
	// 更新时调用的函数
	const reconcileChildFibers = ChildReconciler(true);
	// 初始化时调用的函数
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	const Passive = 0b0010;
	const HookHasEffect = 0b0001; // 代表副作用更新

	// 保存正在执行的workInProgress
	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	let renderLane = NoLane;
	const { currentDispatcher } = internals;
	const HooksDispatcherOnMount = {
	    useState: mountState,
	    useEffect: mountEffect
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState,
	    useEffect: updateEffect
	};
	function renderWithHooks(wip, lane) {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    // 重置 hooks链表
	    wip.memoizedState = null;
	    // 重置 effect链表
	    wip.updateQueue = null;
	    renderLane = lane;
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    // render完后的重置操作
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    renderLane = NoLane;
	    return children;
	}
	function mountEffect(create, deps) {
	    const hook = mountWorkInProgress();
	    const nextDeps = deps === undefined ? null : deps;
	    currentlyRenderingFiber.flags |= PassiveEffect;
	    hook.memoizedState = pushEffect(Passive | HookHasEffect, create, undefined, nextDeps);
	}
	function updateEffect(create, deps) {
	    const hook = updateWorkInProgress();
	    const nextDeps = deps === undefined ? null : deps;
	    let destroy;
	    if (currentHook !== null) {
	        const prevEffect = currentHook.memoizedState;
	        destroy = prevEffect.destroy;
	        if (nextDeps !== null) {
	            // 获取到上一次的deps
	            const prevDeps = prevEffect.deps;
	            // 浅比较依赖 上一次的deps和现在的deps进行比较，看依赖有没有发生变化
	            if (areHookInputsEqual(nextDeps, prevDeps)) {
	                hook.memoizedState = pushEffect(Passive, create, destroy, nextDeps);
	                return;
	            }
	        }
	        currentlyRenderingFiber.flags |= PassiveEffect;
	        hook.memoizedState = pushEffect(Passive | HookHasEffect, create, destroy, nextDeps);
	    }
	}
	// 浅比较方法
	function areHookInputsEqual(nextDeps, prevDeps) {
	    if (nextDeps === null || prevDeps === null) {
	        return false;
	    }
	    for (let i = 0; i < nextDeps.length && i < prevDeps.length; i++) {
	        if (Object.is(nextDeps[i], prevDeps[i])) {
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	// 往updateQueue插入effect
	function pushEffect(hookFlags, create, destroy, deps) {
	    const effect = {
	        tag: hookFlags,
	        create,
	        destroy,
	        deps,
	        next: null
	    };
	    const fiber = currentlyRenderingFiber;
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue === null) {
	        const updateQueue = createFCUpdateQueue();
	        fiber.updateQueue = updateQueue;
	        effect.next = effect;
	        updateQueue.lastEffect = effect;
	    }
	    else {
	        // 插入effect的操作
	        const lastEffect = updateQueue.lastEffect;
	        if (lastEffect === null) {
	            effect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	        else {
	            const firstEffect = lastEffect.next;
	            lastEffect.next = effect;
	            effect.next = firstEffect;
	            updateQueue.lastEffect = effect;
	        }
	    }
	    return effect;
	}
	function createFCUpdateQueue() {
	    const updateQueue = createUpdateQueue();
	    updateQueue.lastEffect = null;
	    return updateQueue;
	}
	function updateState() {
	    // 找到当前useState对应的hook数据
	    const hook = updateWorkInProgress();
	    // 计算新state的逻辑
	    const queue = hook.updateQueue;
	    const pending = queue.shared.pending;
	    queue.shared.pending = null;
	    if (pending !== null) {
	        const { memoizedState } = processUpdateQueue(hook.memoizedState, pending, renderLane);
	        hook.memoizedState = memoizedState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function updateWorkInProgress() {
	    // TODO render阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        // 这是FunctionComponent Update时第一个hook
	        const current = currentlyRenderingFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // 这是FC后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        throw new Error(`组件${currentlyRenderingFiber?.type}本次执行时的hook比上一次执行时多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}
	function mountState(initialState) {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgress();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const lane = requestUpdateLanes();
	    const update = createUpdate(action, lane);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber, lane);
	}
	function mountWorkInProgress() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	// 递归中的递阶段
	const beginWork = (wip, renderLane) => {
	    // 比较ReactElement和FiberNode，返回子fiberNode
	    // 根据tag执行对应操作
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip, renderLane);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip, renderLane);
	        case Fragment:
	            return updateFragment(wip);
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFragment(wip) {
	    const nextChildren = wip.pendingProps;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFunctionComponent(wip, renderLane) {
	    const nextChildren = renderWithHooks(wip, renderLane);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip, renderLane) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    // 对于hostRoot类型，memoizedState就是当前的root节点
	    const { memoizedState } = processUpdateQueue(baseState, pending, renderLane);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    // 把生成的子fiber节点赋值给当前fiber节点的child
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const elementPropKey = '__props';
	const validEventTypeList = ['click'];
	function updateFiberProps(node, props) {
	    node[elementPropKey] = props;
	}
	function initEvent(container, eventType) {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('当前不支持', eventType);
	        return;
	    }
	    {
	        console.log('初始化事件：', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	}
	function dispatchEvent(container, eventType, e) {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('事件不存在target', e);
	        return;
	    }
	    // 1. 收集沿途的事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    // 2. 构造合成事件
	    const se = createSyntheticEvent(e);
	    // 3. 遍历capture 捕获
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        // 4. 遍历bubble 冒泡
	        triggerEventFlow(bubble, se);
	    }
	}
	function createSyntheticEvent(e) {
	    const syntheticEvent = e;
	    syntheticEvent.__stopPropagation = false;
	    const originStopPropagation = e.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        if (originStopPropagation) {
	            originStopPropagation();
	        }
	    };
	    return syntheticEvent;
	}
	function triggerEventFlow(paths, se) {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        callback.call(null, se);
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	}
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClickCapture', 'onClick']
	    }[eventType];
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        capture: [],
	        bubble: []
	    };
	    while (targetElement && targetElement !== container) {
	        // 收集过程
	        const elementProps = targetElement[elementPropKey];
	        if (elementProps) {
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        if (i === 0) {
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            paths.bubble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}

	const createInstance = (type, props) => {
	    // TODO 处理pops
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;
	const commitUpdate = (fiber) => {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        case HostComponent:
	            return updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	        default:
	            {
	                console.warn('为实现的Update类型', fiber);
	            }
	            break;
	    }
	};
	function commitTextUpdate(textInstance, content) {
	    textInstance.textContent = content;
	}
	function removeChild(child, container) {
	    container.removeChild(child);
	}
	function insertChildToContainer(child, container, before) {
	    container.insertBefore(child, before);
	}
	const scheduleMicroTask = typeof queueMicrotask === 'function'
	    ? queueMicrotask
	    : typeof Promise === 'function'
	        ? (callback) => Promise.resolve(null).then(callback)
	        : setTimeout;

	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	// 递归中的归
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    // 根据节点类型执行对应操作
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                // update
	                markUpdate(wip);
	            }
	            else {
	                // 1. 构建DOM
	                const instance = createInstance(wip.type, newProps);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                // update
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                // 2. 将DOM插入到DOM树中
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	        case FunctionComponent:
	        case Fragment:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        // 如果找到要插入的类型，直接在父节点插入当前节点
	        if (node?.tag === HostComponent || node?.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            // 边界处理，如果不是要插入的类型，但是还有子节点，继续往下遍历
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 已经归到最顶层，退出循环
	        if (node === wip) {
	            return;
	        }
	        // 没有命中上面的情况，开始往上递归
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        // 判断当前节点是否有兄弟节点
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 从子节点开始往上收集flags
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let nextEffect = null;
	const commitMutationEffect = (finishedWork, root) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 遍历到底了 开始向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect, root);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork, root) => {
	    const flags = finishedWork.flags;
	    // 插入到DOM节点
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    // 节点更新
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    // 节点删除
	    if ((flags & Deletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((deletion) => {
	                commitDeletion(deletion, root);
	            });
	        }
	        // 移除flags
	        finishedWork.flags &= ~Deletion;
	    }
	    // 处理useEffect
	    if ((flags & PassiveEffect) !== NoFlags) {
	        // 收集回调
	        commitPassiveEffect(finishedWork, root, 'update');
	        finishedWork.flags &= ~PassiveEffect;
	    }
	};
	function commitPassiveEffect(fiber, root, type) {
	    // update unmount
	    if (fiber.tag !== FunctionComponent ||
	        (type === 'update' && (fiber.flags & PassiveEffect) === NoFlags)) {
	        return;
	    }
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue !== null) {
	        if (updateQueue.lastEffect === null && true) {
	            console.error('当FC存在PassiveEffect flags时，不应该不存在effect');
	        }
	        root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
	    }
	}
	function commitHookEffectList(flags, lastEffect, callback) {
	    let effect = lastEffect.next;
	    do {
	        if ((effect.tag & flags) === flags) {
	            callback(effect);
	        }
	        effect = effect.next;
	    } while (effect !== lastEffect.next);
	}
	// 组件卸载
	function commitHookEffectListUnmount(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	        effect.tag &= ~HookHasEffect;
	    });
	}
	// 触发所有上次更新的destroy
	function commitHookEffectListDestroy(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	    });
	}
	// 触发effect里的回调函数
	function commitHookEffectListCreate(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const create = effect.create;
	        if (typeof create === 'function') {
	            // 把useEffect的执行结果返回给destroy
	            effect.destroy = create();
	        }
	    });
	}
	function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
	    // 1. 找到第一个root host节点
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (unmountFiber === node) {
	                childrenToDelete.push(unmountFiber);
	            }
	            node = node.sibling;
	        }
	    }
	    // 2. 每找到一个host节点，判断下这个节点是不是第1步找到那个节点的兄弟节点
	}
	/**
	 * 删除需要考虑：
	 * HostComponent：需要遍历他的子树，为后续解绑ref创造条件，HostComponent本身只需删除最上层节点即可
	 * FunctionComponent：effect相关hook的执行，并遍历子树
	 */
	const commitDeletion = (childToDelete, root) => {
	    // 在Fragment之前，只需删除子树的根Host节点，但支持Fragment后，可能需要删除同级多个节点
	    const rootChildrenToDelete = [];
	    // 递归子树
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                // TODO 解绑ref
	                return;
	            case HostText:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                return;
	            case FunctionComponent:
	                // useEffect unmount
	                commitPassiveEffect(unmountFiber, root, 'unmount');
	                return;
	            default:
	                {
	                    console.warn('未处理的unmount类型', unmountFiber);
	                }
	                break;
	        }
	    });
	    // 移除rootHostComponent的dom操作
	    if (rootChildrenToDelete.length) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            rootChildrenToDelete.forEach((node) => {
	                removeChild(node.stateNode, hostParent);
	            });
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	};
	const commitNestedComponent = (root, onCommitUnmount) => {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            // 向下遍历的过程
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            // 终止条件
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            // 向上归的过程
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // 先获取父级元素对应的数组环境节点
	    const hostParent = getHostParent(finishedWork);
	    // 之前的插入操作是appendChild，现在为了实现移动操作，需要支持insertBefore
	    // 查找兄弟对应的Host节点
	    const sibling = getHostSibling(finishedWork);
	    if (hostParent !== null) {
	        // 找到对应的DOM，然后插入到父节点的DOM中
	        insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	    }
	};
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibling: while (true) {
	        // 如果向下没有找到，就向上遍历找到父级节点
	        while (node.sibling === null) {
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostComponent ||
	                parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        // 如果当前fiber不是文本类型或Dom类型，则向下遍历找到对应Dom节点
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 向下遍历，找子孙节点
	            if ((node.flags && Placement) !== NoFlags) {
	                continue findSibling;
	            }
	            // 已经到底了
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                // 向下遍历
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        // 到这里就说明找到了当前的node节点，直接return dom
	        if ((node.flags && Placement) === NoFlags) {
	            return node.stateNode;
	        }
	    }
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, before) {
	    if (finishedWork.tag === HostText || finishedWork.tag === HostComponent) {
	        if (before) {
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            appendChildToContainer(hostParent, finishedWork.stateNode);
	        }
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	let syncQueue = null;
	let isFlushSyncQueue = false;
	// 把回调函数放入queue中等待执行
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	// 异步执行的回调函数
	function flushSyncCallbacks() {
	    // 批处理更新 防止多个update多次调用
	    if (!isFlushSyncQueue && syncQueue) {
	        isFlushSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (error) {
	            {
	                console.error('flushSyncCallbacks报错', error);
	            }
	        }
	        finally {
	            isFlushSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	let workInProgress = null; // 全局指针，指向正在工作的fiber节点
	let workInProgressRootRenderLane = NoLane; // 本次更新的lane
	let rootDoesHasPassiveEffects = false; // 防止useEffect多次调度
	// 在fiber中调度update
	function scheduleUpdateOnFiber(fiber, lane) {
	    // TODO 调度功能
	    // fiberRootNode
	    const root = markUpdateFormFiberToRoot(fiber);
	    markRootUpdated(root, lane);
	    ensureRootIsScheduled(root);
	}
	// schedule 调度阶段入口
	function ensureRootIsScheduled(root) {
	    const updateLane = getHighestPriorityLane(root.pendingLanes);
	    if (updateLane === NoLane) {
	        return;
	    }
	    if (updateLane === SyncLane) {
	        // 同步优先级 用微任务调度
	        {
	            console.log('在微任务中调度， 优先级：', updateLane);
	        }
	        scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root, updateLane));
	        // 使用微任务进行异步调用
	        scheduleMicroTask(flushSyncCallbacks);
	    }
	}
	// 记录fiber节点更新的lane到FiberRootNode里
	function markRootUpdated(root, lane) {
	    root.pendingLanes = mergeLanes(root.pendingLanes, lane);
	}
	// 往上遍历到根节点
	function markUpdateFormFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	// 创建workInProgress
	function prepareFreshStack(root, lane) {
	    workInProgress = createWorkInProgress(root.current, {});
	    workInProgressRootRenderLane = lane;
	}
	function performSyncWorkOnRoot(root, lane) {
	    const nextLane = getHighestPriorityLane(root.pendingLanes);
	    if (nextLane !== SyncLane) {
	        // 其它比SyncLane低的优先级
	        // 还有一种NoLane的情况
	        ensureRootIsScheduled(root);
	        return;
	    }
	    // 初始化workInProgress
	    prepareFreshStack(root, lane);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (error) {
	            {
	                console.warn('workLoop 发生错误', error);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    root.finishedLane = lane;
	    workInProgressRootRenderLane = NoLane;
	    commitRoot(root);
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber, workInProgressRootRenderLane); // 返回子节点
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        // 如果没有子节点，就开始往上遍历
	        completeUnitOfWork(fiber);
	    }
	    else {
	        // 否则继续往下遍历
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const siblingFiber = node.sibling; // 获取兄弟节点
	        // 如果存在兄弟节点，赋值当前节点给兄弟节点
	        if (siblingFiber !== null) {
	            workInProgress = siblingFiber;
	            return;
	        }
	        // 否则的话赋值为父节点开始往上遍历
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    const lane = root.finishedLane;
	    if (lane === NoLane && true) {
	        console.error('commit阶段finishedLane不应该是NoLane');
	    }
	    // 重置
	    root.finishedWork = null;
	    root.finishedLane = NoLane;
	    markRootFinished(root, lane);
	    if ((finishedWork.flags & PassiveMask) !== NoFlags ||
	        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags) {
	        // 防止effect多次调用的处理
	        if (!rootDoesHasPassiveEffects) {
	            rootDoesHasPassiveEffects = true;
	            // 调度副作用
	            scheduler.unstable_scheduleCallback(scheduler.unstable_NormalPriority, () => {
	                // 执行副作用
	                flushPassiveEffects(root.pendingPassiveEffects);
	                return;
	            });
	        }
	    }
	    // 判断3个子阶段需要执行的操作
	    // 根据 MutationMask 来判断 root flags 和 root subtreeFlags 是否有需要执行的flags
	    const subtreeFlags = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeFlags || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffect(finishedWork, root);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	    rootDoesHasPassiveEffects = false;
	    ensureRootIsScheduled(root);
	}
	function flushPassiveEffects(pendingPassiveEffect) {
	    pendingPassiveEffect.unmount.forEach((effect) => {
	        commitHookEffectListUnmount(Passive, effect);
	    });
	    pendingPassiveEffect.unmount = [];
	    // 先更新所有上一次更新的destroy回调
	    pendingPassiveEffect.update.forEach((effect) => {
	        commitHookEffectListDestroy(Passive | HookHasEffect, effect);
	    });
	    // 执行完destroy后才能触发create的回调
	    pendingPassiveEffect.update.forEach((effect) => {
	        commitHookEffectListCreate(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffect.update = [];
	    // 可能在执行useEffect回调过程中，还有别的更新流程，这里做一个兜底
	    flushSyncCallbacks();
	}

	// 创建root节点
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	// 创建update，然后放进fiber节点的updateQueue里面
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const lane = requestUpdateLanes();
	    const update = createUpdate(element, lane);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber, lane);
	    return element;
	}

	// ReactDom.createRoot(root).render(<App />)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDom = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDom;

}));
